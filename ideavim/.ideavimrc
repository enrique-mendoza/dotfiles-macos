" Examples: https://jb.gg/share-ideavimrc
" NOTE. ASCII Banner Font: ANSI Shadow

"    ██████╗ ██████╗ ████████╗██╗ ██████╗ ███╗   ██╗███████╗
"   ██╔═══██╗██╔══██╗╚══██╔══╝██║██╔═══██╗████╗  ██║██╔════╝
"   ██║   ██║██████╔╝   ██║   ██║██║   ██║██╔██╗ ██║███████╗
"   ██║   ██║██╔═══╝    ██║   ██║██║   ██║██║╚██╗██║╚════██║
"   ╚██████╔╝██║        ██║   ██║╚██████╔╝██║ ╚████║███████║
"    ╚═════╝ ╚═╝        ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝

set autoindent
set clipboard+=unnamedplus
set hlsearch
set ignorecase
set incsearch
set smartcase
set smartindent
set scrolloff=5
set noerrorbells
set visualbell
set relativenumber

vnoremap < <gv
vnoremap > >gv
nnoremap <s-h> ^
nnoremap <s-l> g_
vnoremap <s-h> ^
vnoremap <s-l> g_

"   ██████╗ ██╗     ██╗   ██╗ ██████╗ ██╗███╗   ██╗███████╗
"   ██╔══██╗██║     ██║   ██║██╔════╝ ██║████╗  ██║██╔════╝
"   ██████╔╝██║     ██║   ██║██║  ███╗██║██╔██╗ ██║███████╗
"   ██╔═══╝ ██║     ██║   ██║██║   ██║██║██║╚██╗██║╚════██║
"   ██║     ███████╗╚██████╔╝╚██████╔╝██║██║ ╚████║███████║
"   ╚═╝     ╚══════╝ ╚═════╝  ╚═════╝ ╚═╝╚═╝  ╚═══╝╚══════╝

set sneak
" set easymotion
set surround
set NERDTree
set highlightedyank

let g:highlightedyank_highlight_duration = "100"
let g:highlightedyank_highlight_color = "rgba(64, 72, 89, 155)"

set which-key
set notimeout

let g:WhichKey_CommandStyle = "none"
let g:WhichKey_FontFamily = "JetBrainsMono Nerd Font"
let g:WhichKey_FontSize = 15
let g:WhichKey_KeyStyle = "none"
let g:WhichKey_ShowTypedSequence = "false"
let g:WhichKey_ShowVimActions = "true"
let g:WhichKey_PrefixStyle = "none"
let g:WhichKey_Divider = " + "

"   ███╗   ███╗ █████╗ ██████╗ ███████╗
"   ████╗ ████║██╔══██╗██╔══██╗██╔════╝
"   ██╔████╔██║███████║██████╔╝███████╗
"   ██║╚██╔╝██║██╔══██║██╔═══╝ ╚════██║
"   ██║ ╚═╝ ██║██║  ██║██║     ███████║
"   ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝     ╚══════╝

""" Map leader to space ---------------------

let g:WhichKeyDesc_leader = "<leader> Leader"

let mapleader=" "

let g:WhichKeyDesc_no_hl_search = "<leader>n  Clear Search"

map <leader>n :nohlsearch<CR>

"   ██╗██████╗ ███████╗ █████╗      █████╗  ██████╗████████╗██╗ ██████╗ ███╗   ██╗███████╗
"   ██║██╔══██╗██╔════╝██╔══██╗    ██╔══██╗██╔════╝╚══██╔══╝██║██╔═══██╗████╗  ██║██╔════╝
"   ██║██║  ██║█████╗  ███████║    ███████║██║        ██║   ██║██║   ██║██╔██╗ ██║███████╗
"   ██║██║  ██║██╔══╝  ██╔══██║    ██╔══██║██║        ██║   ██║██║   ██║██║╚██╗██║╚════██║
"   ██║██████╔╝███████╗██║  ██║    ██║  ██║╚██████╗   ██║   ██║╚██████╔╝██║ ╚████║███████║
"   ╚═╝╚═════╝ ╚══════╝╚═╝  ╚═╝    ╚═╝  ╚═╝ ╚═════╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝

"" Descriptions and maps ---------------------

let g:WhichKeyDesc_comment_by_line_comment = "<leader>/  Comment Toggle"
let g:WhichKeyDesc_explorer = "<leader>e  Explorer"
let g:WhichKeyDesc_split_horizontally = "<leader>h  Split Horizontally"
let g:WhichKeyDesc_split_vertically = "<leader>v  Split Vertically"

map <leader>/ <Action>(CommentByLineComment)
nnoremap <leader>e :NERDTree<CR>
map <leader>h <Action>(SplitHorizontally)
map <leader>v <Action>(SplitVertically)

"" Buffers: descriptions and maps ---------------------

let g:WhichKeyDesc_buffers_editors = "<leader>b  Buffers & Tabs"

let g:WhichKeyDesc_close_all_editors = "<leader>bA  Close All Editors"
let g:WhichKeyDesc_close_all_editors_but_active = "<leader>ba  Close Others Editors"
let g:WhichKeyDesc_close_editor = "<leader>bc  Close Editor"
let g:WhichKeyDesc_move_tab_left = "<leader>bh  Move Tab Into Left Group"
let g:WhichKeyDesc_move_tab_down = "<leader>bj  Move Tab Into Below Group"
let g:WhichKeyDesc_move_tab_up = "<leader>bk  Move Tab Into Above Group"
let g:WhichKeyDesc_move_tab_right = "<leader>bl  Move Tab Into Right Group"
let g:WhichKeyDesc_prev_splitter = "<leader>bn  Previous Splitter"
let g:WhichKeyDesc_move_editor_to_opposite_tab_group = "<leader>bo  Move Editor To Opposite Tab Group"
let g:WhichKeyDesc_next_splitter = "<leader>bp  Next Splitter"
let g:WhichKeyDesc_reopen_closed_tab = "<leader>br  Reopen Closed Editor"
let g:WhichKeyDesc_change_split_orientation = "<leader>by  Change Split Orientation"
let g:WhichKeyDesc_unsplit = "<leader>bu  Unsplit"

map <leader>bA <Action>(CloseAllEditors)
map <leader>ba <Action>(CloseAllEditorsButActive)
map <leader>bc <Action>(CloseEditor)
map <leader>bh <Action>(MoveTabLeft)
map <leader>bj <Action>(MoveTabDown)
map <leader>bk <Action>(MoveTabUp)
map <leader>bl <Action>(MoveTabRight)
map <leader>bn <Action>(PrevSplitter)
map <leader>bo <Action>(MoveEditorToOppositeTabGroup)
map <leader>bp <Action>(NextSplitter)
map <leader>br <Action>(ReopenClosedTab)
map <leader>bu <action>(Unsplit)
map <leader>by <Action>(ChangeSplitOrientation)

"" Debug: descriptions and maps ---------------------

let g:WhichKeyDesc_debug = "<leader>d  Debug"

let g:WhichKeyDesc_remove_all_breakpoints = "<leader>dR  Remove All Breakpoints"
let g:WhichKeyDesc_step_into = "<leader>di  Step Into"
let g:WhichKeyDesc_mute_all_breakpoints = "<leader>dm  Mute All Breakpoints"
let g:WhichKeyDesc_run_debug = "<leader>ds  Start"
let g:WhichKeyDesc_step_over = "<leader>do  Step Over"
let g:WhichKeyDesc_pause = "<leader>dp  Pause"
let g:WhichKeyDesc_remove_all_breakpoints_in_file = "<leader>dr  Remove All Breakpoints In File"
let g:WhichKeyDesc_toggle_line_breakpoint = "<leader>dt   Toggle Breakpoint"
let g:WhichKeyDesc_step_out = "<leader>du  Step Out"

map <leader>dR <Action>(Debugger.RemoveAllBreakpoints)
map <leader>di <Action>(StepInto)
map <leader>dm <Action>(XDebugger.MuteBreakpoints)
map <leader>do <Action>(StepOver)
map <leader>dp <Action>(Pause)
map <leader>dr <Action>(Debugger.RemoveAllBreakpointsInFile)
map <leader>ds <Action>(Debug)
map <leader>dt <Action>(ToggleLineBreakpoint)
map <leader>du <Action>(StepOut)

"" Find: descriptions and maps ---------------------

let g:WhichKeyDesc_search = "<leader>f  Find"

let g:WhichKeyDesc_goto_action = "<leader>fa  Action"
let g:WhichKeyDesc_goto_class = "<leader>fc  Class"
let g:WhichKeyDesc_goto_declaration = "<leader>fd  Declaration"
let g:WhichKeyDesc_search_everywhere = "<leader>fe  Everywhere"
let g:WhichKeyDesc_find = "<leader>fF  In File"
let g:WhichKeyDesc_goto_file = "<leader>ff  File"
let g:WhichKeyDesc_goto_implementation = "<leader>fi  Implementation"
let g:WhichKeyDesc_open_file = "<leader>fo  Project"
let g:WhichKeyDesc_find_in_path = "<leader>fp  In Path"
let g:WhichKeyDesc_switcher = "<leader>fr  Recent File"
let g:WhichKeyDesc_goto_symbol = "<leader>fs  Symbol"
let g:WhichKeyDesc_goto_test = "<leader>ft  Test"
let g:WhichKeyDesc_find_usages = "<leader>fu  Usages"

map <leader>fa <Action>(GotoAction)
map <leader>fc <Action>(GotoClass)
map <leader>fd <Action>(GotoDeclaration)
map <leader>fe <Action>(SearchEverywhere)
map <leader>fF <Action>(Find)
map <leader>ff <Action>(GotoFile)
map <leader>fi <Action>(GotoImplementation)
map <leader>fo <Action>(OpenFile)
map <leader>fp <Action>(FindInPath)
map <leader>fr <Action>(Switcher)
map <leader>fs <Action>(GotoSymbol)
map <leader>ft <Action>(GotoTest)
map <leader>fu <Action>(FindUsages)

"" Git: descriptions and maps ---------------------

let g:WhichKeyDesc_git = "<leader>g  Git"

let g:WhichKeyDesc_editor_gutter_vcs_popup_menu = "<leader>gB  Git Blame"
let g:WhichKeyDesc_git_compare_with_branch = "<leader>gC  Compare With Branch"
let g:WhichKeyDesc_vcs_show_tabbed_file_history = "<leader>gH  File History"
let g:WhichKeyDesc_git_push_up_to_commit = "<leader>gP  Push"
let g:WhichKeyDesc_git_resolve_conflicts = "<leader>gR  Resolve Conflicts"
let g:WhichKeyDesc_vcs_rollback_changed_lines = "<leader>gU  Rollback Changed Line"
let g:WhichKeyDesc_git_add = "<leader>ga  Add Files"
let g:WhichKeyDesc_git_branches = "<leader>gb  Checkout Branch"
let g:WhichKeyDesc_activate_commit_tool_window = "<leader>gc  Commit"
let g:WhichKeyDesc_git_delete_branch_action = "<leader>gd  Delete Branch"
let g:WhichKeyDesc_git_fetch = "<leader>gf  Fetch"
let g:WhichKeyDesc_activate_version_control_tool_window = "<leader>gh  History"
let g:WhichKeyDesc_git_init = "<leader>gi  Init New Repository"
let g:WhichKeyDesc_git_merge = "<leader>gm  Merge Branches"
let g:WhichKeyDesc_git_create_new_branch = "<leader>gn  Create New Branch"
let g:WhichKeyDesc_git_pull = "<leader>gp  Pull"
let g:WhichKeyDesc_git_stash = "<leader>gs  Stash Changes"
let g:WhichKeyDesc_git_unstash = "<leader>gu  Unstash Changes"
let g:WhichKeyDesc_vcs_show_current_change_marker = "<leader>gy  Show Current Change In Line"
let g:WhichKeyDesc_git_reset = "<leader>gz  Reset Changes"

map <leader>gB <Action>(EditorGutterVcsPopupMenu)
map <leader>gC <Action>(Git.CompareWithBranch)
map <leader>gH <Action>(Vcs.ShowTabbedFileHistory)
map <leader>gP <Action>(Vcs.PushUpToCommit)
map <leader>gR <Action>(Git.ResolveConflicts)
map <leader>gU <Action>(Vcs.RollbackChangedLines)
map <leader>ga <Action>(Git.Add)
map <leader>gb <Action>(Git.Branches)
map <leader>gc <Action>(ActivateCommitToolWindow)
map <leader>gd <Action>(GitDeleteBranchAction)
map <leader>gf <Action>(Git.Fetch)
map <leader>gh <Action>(ActivateVersionControlToolWindow)
map <leader>gi <Action>(Git.Init)
map <leader>gm <Action>(Git.Merge)
map <leader>gn <Action>(Git.CreateNewBranch)
map <leader>gp <Action>(Git.Pull)
map <leader>gs <Action>(Git.Stash)
map <leader>gu <Action>(Git.Unstash)
map <leader>gy <Action>(VcsShowCurrentChangeMarker)
map <leader>gz <Action>(Git.Reset)

"" IntelliJ IDEA: descriptions and maps ---------------------

let g:WhichKeyDesc_run_options = "<leader>i  Intellij IDEA"

let g:WhichKeyDesc_activate_database_tool_window = "<leader>ib  Database Tool"
let g:WhichKeyDesc_choose_run_configuration = "<leader>ic  Run Configuration"
let g:WhichKeyDesc_activate_debug_tool_window = "<leader>id  Debug Tool"
let g:WhichKeyDesc_run = "<leader>ir  Run"
let g:WhichKeyDesc_show_project_structure_settings = "<leader>ip  Project Structure Settings"
let g:WhichKeyDesc_show_settings = "<leader>is  Settings"
let g:WhichKeyDesc_activate_unit_tests_tool_window = "<leader>iu  Unit Tests Tool"
let g:WhichKeyDesc_reload_idea_vim = "<leader>iv  Reload IdeaVim"
let g:WhichKeyDesc_navbar_tool_bar = "<leader>iw  Run Widget"
let g:WhichKeyDesc_stop = "<leader>ix  Stop"
let g:WhichKeyDesc_activate_run_tool_window = "<leader>iz  Run Tool"

map <leader>ib <Action>(ActivateDatabaseToolWindow)
map <Leader>ic <Action>(ChooseRunConfiguration)
map <leader>id <Action>(ActivateDebugToolWindow)
map <leader>ip <Action>(ShowProjectStructureSettings)
map <leader>ir <Action>(Run)
map <leader>is <Action>(ShowSettings)
map <Leader>iu <Action>(ActivateUnitTestsToolWindow)
map <Leader>iv <Action>(IdeaVim.ReloadVimRc.reload)
map <leader>ix <Action>(Stop)
map <Leader>iw <Action>(NavBarToolBar)
map <leader>iz <Action>(ActivateRunToolWindow)

"" Java: descriptions and maps ---------------------

let g:WhichKeyDesc_java = "<leader>j  Java"

let g:WhichKeyDesc_maven_download_all_sources = "<leader>jA  Maven Download All Sources"
let g:WhichKeyDesc_maven_download_run_build = "<leader>jR  Maven Run Build"
let g:WhichKeyDesc_generate = "<leader>ja  Generate"
let g:WhichKeyDesc_generate_constructor = "<leader>jc  Generate Constructor"
let g:WhichKeyDesc_quick_javadoc = "<leader>jd  Quick Javadoc"
let g:WhichKeyDesc_generate_getter = "<leader>jg  Generate Getters"
let g:WhichKeyDesc_implement_methods = "<leader>ji  Implement Methods"
let g:WhichKeyDesc_generate_getter_and_setter = "<leader>jm  Generate Getters And Setters"
let g:WhichKeyDesc_override_methods = "<leader>jo  Override Methods"
let g:WhichKeyDesc_generate_setter = "<leader>js  Generate Setters"

map <leader>jA <Action>(Maven.DownloadAllSources)
map <leader>jR <Action>(Maven.RunBuild)
map <leader>ja <Action>(Generate)
map <leader>jc <Action>(GenerateConstructor)
map <leader>jd <Action>(QuickJavaDoc)
map <leader>jg <Action>(GenerateGetter)
map <leader>ji <Action>(ImplementMethods)
map <leader>jm <Action>(GenerateGetterAndSetter)
map <leader>jo <Action>(OverrideMethods)
map <leader>js <Action>(GenerateSetter)

"" LSP: descriptions and maps ---------------------

let g:WhichKeyDesc_lsp = "<leader>l  LSP"

let g:WhichKeyDesc_show_intention_actions = "<leader>la  Code Actions"
let g:WhichKeyDesc_quick_definition = "<leader>ld  Definition"
let g:WhichKeyDesc_show_error_description = "<leader>le  Diagnostics"
let g:WhichKeyDesc_reformat_code = "<leader>lf  Format"
let g:WhichKeyDesc_highlight_usages_in_file = "<leader>lh  Highlight Usages In File"
let g:WhichKeyDesc_show_hover_info = "<leader>li  Show Hover Info"
let g:WhichKeyDesc_optimize_imports = "<leader>lo  Optimize Imports"
let g:WhichKeyDesc_quick_preview = "<leader>lp  Preview"
let g:WhichKeyDesc_rename_element = "<leader>lr  Rename"
let g:WhichKeyDesc_quick_type_definition = "<leader>lt  Type Definition"
let g:WhichKeyDesc_show_usages = "<leader>lu  Usage"

map <leader>la <Action>(ShowIntentionActions)
map <leader>ld <Action>(QuickTypeDefinition)
map <leader>le <Action>(ShowErrorDescription)
map <leader>lf <Action>(ReformatCode)
map <leader>lh <Action>(HighlightUsagesInFile)
map <leader>li <Action>(ShowHoverInfo)

map <leader>lo <Action>(OptimizeImports)
map <leader>lp <Action>(QuickPreview)
map <leader>lr <Action>(RenameElement)
map <leader>lt <Action>(QuickImplementations)
map <leader>lu <Action>(ShowUsages)

"" Bookmarks: descriptions and maps ---------------------

let g:WhichKeyDesc_mark = "<leader>m  Bookmarks"

let g:WhichKeyDesc_goto_next_bookmark = "<leader>mn  Next Bookmark"
let g:WhichKeyDesc_goto_previous_bookmark = "<leader>mp  Previous Bookmark"
let g:WhichKeyDesc_show_bookmark = "<leader>ms  Show Bookmarks"
let g:WhichKeyDesc_toggle_bookmark = "<leader>mt  Toggle Bookmark"

map <leader>mn <Action>(GotoNextBookmark)
map <leader>mp <Action>(GotoPreviousBookmark)
map <leader>ms <Action>(ShowBookmarks)
map <leader>mt <Action>(ToggleBookmark)

"" UI: descriptions and maps ---------------------

let g:WhichKeyDesc_ui_toggles = "<leader>u  UI"

let g:WhichKeyDesc_change_color_schema = "<leader>uc  Colorscheme"
let g:WhichKeyDesc_distraction_free_mode = "<leader>uf  Distraction Free Mode"
let g:WhichKeyDesc_zen_mode = "<leader>uz  Zen Mode"
let g:WhichKeyDesc_view_status_bar = "<leader>us  Toggle Status Bar"
let g:WhichKeyDesc_view_tool_buttons = "<leader>ut  Toggle Tool Buttons"

map <leader>uc <Action>(QuickChangeScheme)
map <leader>us <Action>(ViewStatusBar)
map <leader>ut <Action>(ViewToolButtons)
map <leader>uf <Action>(ToggleDistractionFreeMode)
map <leader>uz <Action>(ToggleZenMode)

"" Extract & Introduce: descriptions and maps ---------------------

let g:WhichKeyDesc_extract_actions = "<leader>x  Extract & Introduce"

let g:WhichKeyDesc_inline = "<leader>xa  Inline"
let g:WhichKeyDesc_extract_class = "<leader>xc  Extract Class"
let g:WhichKeyDesc_introduce_field = "<leader>xf  Introduce Field"
let g:WhichKeyDesc_extract_interface = "<leader>xi  Extract Interface"
let g:WhichKeyDesc_extract_method = "<leader>xm  Extract Method"
let g:WhichKeyDesc_introduce_parameter = "<leader>xp   Introduce Parameter"
let g:WhichKeyDesc_extract_superclass = "<leader>xs  Extract Superclass"
let g:WhichKeyDesc_introduce_variable = "<leader>xv  Introduce Variable"
let g:WhichKeyDesc_introduce_constant = "<leader>xx  Introduce Constant"

map <Leader>xa <Action>(Inline)
map <Leader>xc <Action>(ExtractClass)
map <Leader>xf <Action>(IntroduceField)
map <Leader>xi <Action>(ExtractInterface)
map <Leader>xm <Action>(ExtractMethod)
map <Leader>xp <Action>(IntroduceParameter)
map <Leader>xs <Action>(ExtractSuperclass)
map <Leader>xv <Action>(IntroduceVariable)
map <Leader>xx <Action>(IntroduceConstant)
